---
apiVersion: v1
kind: Service
metadata:
  name: app-kafka-hs
  namespace: app
  labels:
    app: app-kafka
spec:
  ports:
  - port: 9092
    name: server
  clusterIP: None
  selector:
    app: app-kafka
---
apiVersion: v1
kind: Service
metadata:
  name: app-kafka-cs
  namespace: app
  labels:
    app: app-kafka
spec:
  ports:
  - port: 9092
    name: server
  selector:
    app: app-kafka
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: app-kafka-pdb
  namespace: app
spec:
  selector:
    matchLabels:
      app: app-kafka
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: app-kafka
  namespace: app
spec:
  serviceName: app-kafka-hs
  replicas: 10
  podManagementPolicy: Parallel
  updateStrategy:
      type: RollingUpdate
  selector:
    matchLabels:
      app: app-kafka
  template:
    metadata:
      labels:
        app: app-kafka
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - app-kafka
                    - elasticsearch-master
                    - elasticsearch-data
                    - app-hadoop-nn
                    - app-hadoop-dn
                    - app-hbase-master
                    - app-hbase-region
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values: 
                        - app-zookeeper 
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 10 
      containers:
      - name: app-kafka
        imagePullPolicy: IfNotPresent
        image: 10.17.148.19/app/kafka-arm:2.12-2.5.1
        resources:
          requests:
            memory: "1Gi"
            cpu: "512m"
          limits:
            memory: "6Gi"
            cpu: "2048m"
        command:
                #  - tail
                #args:
                #  - -f
                #  - /dev/null
          - sh
          - -c
          - "exec kafka-server-start.sh /opt/kafka/config/server.properties --override broker.id=${HOSTNAME##*-} \
            --override listeners=PLAINTEXT://:9092 \
            --override zookeeper.connect=app-zookeeper-cs.bangcle.svc.cluster.local:2181 \
            --override log.dir=/var/lib/kafka/data \
            --override auto.create.topics.enable=true \
            --override auto.leader.rebalance.enable=true \
            --override background.threads=10 \
            --override compression.type=producer \
            --override delete.topic.enable=false \
            --override leader.imbalance.check.interval.seconds=300 \
            --override leader.imbalance.per.broker.percentage=10 \
            --override log.flush.interval.messages=9223372036854775807 \
            --override log.flush.offset.checkpoint.interval.ms=60000 \
            --override log.flush.scheduler.interval.ms=9223372036854775807 \
            --override log.retention.bytes=-1 \
            --override log.retention.hours=168 \
            --override log.roll.hours=168 \
            --override log.roll.jitter.hours=0 \
            --override log.segment.bytes=1073741824 \
            --override log.segment.delete.delay.ms=60000 \
            --override message.max.bytes=1000012 \
            --override min.insync.replicas=1 \
            --override num.io.threads=8 \
            --override num.network.threads=3 \
            --override num.recovery.threads.per.data.dir=1 \
            --override num.replica.fetchers=1 \
            --override offset.metadata.max.bytes=4096 \
            --override offsets.commit.required.acks=-1 \
            --override offsets.commit.timeout.ms=5000 \
            --override offsets.load.buffer.size=5242880 \
            --override offsets.retention.check.interval.ms=600000 \
            --override offsets.retention.minutes=1440 \
            --override offsets.topic.compression.codec=0 \
            --override offsets.topic.num.partitions=50 \
            --override offsets.topic.replication.factor=3 \
            --override offsets.topic.segment.bytes=104857600 \
            --override queued.max.requests=500 \
            --override quota.consumer.default=9223372036854775807 \
            --override quota.producer.default=9223372036854775807 \
            --override replica.fetch.min.bytes=1 \
            --override replica.fetch.wait.max.ms=500 \
            --override replica.high.watermark.checkpoint.interval.ms=5000 \
            --override replica.lag.time.max.ms=10000 \
            --override replica.socket.receive.buffer.bytes=65536 \
            --override replica.socket.timeout.ms=30000 \
            --override request.timeout.ms=30000 \
            --override socket.receive.buffer.bytes=102400 \
            --override socket.request.max.bytes=104857600 \
            --override socket.send.buffer.bytes=102400 \
            --override unclean.leader.election.enable=true \
            --override zookeeper.session.timeout.ms=60000 \
            --override zookeeper.set.acl=false \
            --override broker.id.generation.enable=true \
            --override connections.max.idle.ms=600000 \
            --override controlled.shutdown.enable=true \
            --override controlled.shutdown.max.retries=3 \
            --override controlled.shutdown.retry.backoff.ms=5000 \
            --override controller.socket.timeout.ms=30000 \
            --override default.replication.factor=1 \
            --override fetch.purgatory.purge.interval.requests=1000 \
            --override group.max.session.timeout.ms=300000 \
            --override group.min.session.timeout.ms=6000 \
            --override log.cleaner.backoff.ms=15000 \
            --override log.cleaner.dedupe.buffer.size=134217728 \
            --override log.cleaner.delete.retention.ms=86400000 \
            --override log.cleaner.enable=true \
            --override log.cleaner.io.buffer.load.factor=0.9 \
            --override log.cleaner.io.buffer.size=524288 \
            --override log.cleaner.io.max.bytes.per.second=1.7976931348623157E308 \
            --override log.cleaner.min.cleanable.ratio=0.5 \
            --override log.cleaner.min.compaction.lag.ms=0 \
            --override log.cleaner.threads=1 \
            --override log.cleanup.policy=delete \
            --override log.index.interval.bytes=4096 \
            --override log.index.size.max.bytes=10485760 \
            --override log.message.timestamp.difference.max.ms=9223372036854775807 \
            --override log.message.timestamp.type=CreateTime \
            --override log.preallocate=false \
            --override log.retention.check.interval.ms=300000 \
            --override max.connections.per.ip=2147483647 \
            --override num.partitions=8 \
            --override producer.purgatory.purge.interval.requests=1000 \
            --override replica.fetch.backoff.ms=1000 \
            --override replica.fetch.max.bytes=1048576 \
            --override replica.fetch.response.max.bytes=10485760 \
            --override reserved.broker.max.id=1000 "
        env:
        #- name: KAFKA_HEAP_OPTS
        #  value : "-Xmx4G -Xms4G"
        - name: KAFKA_OPTS
          value: "-Dlogging.level=INFO"
        - name: KAFKA_JVM_PERFORMANCE_OPTS
          #value: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true  -XX:+UnlockExperimentalVMOptions"
          value: "-server  -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true  "
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/kafka
          #- name: kafka-run-class
          #  mountPath: /opt/kafka/bin/kafka-run-class.sh
          #  subPath: kafka-run-class.sh
        ports:
        - containerPort: 9092
          name: tcp
          protocol: TCP
        livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: tcp
            timeoutSeconds: 10
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: tcp
          timeoutSeconds: 10
      #securityContext:
      #  runAsUser: 1000
      #  fsGroup: 1000
      #volumes:
      #  - name: kafka-run-class
      #    configMap:
      #      defaultMode: 0777
      #      name: app-hadoop
      #      items:
      #        - key: kafka-run-class.sh
      #          path: kafka-run-class.sh
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      storageClassName: ceph-rbd
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 500Gi
